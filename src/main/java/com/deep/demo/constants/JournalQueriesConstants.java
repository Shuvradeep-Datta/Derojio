package com.deep.demo.constants;

public class JournalQueriesConstants {
    public static final String CONFIG_SEGMENT_QUERY = "select id,segment value,status from  mje_dbo.config_segment";
    public static final String CONFIG_COUNTRY_QUERY = "select id,country value,status from  mje_dbo.config_country";
    public static final String RECORD_STATUS_QUERY = "SELECT * FROM mje_dbo.Record_Status";
    public static final String CONFIG_TARGET_SYSTEM_QUERY = "select id,target_ledger_system value,status from  mje_dbo.config_target_ledger_system";
    public static final String CONFIG_PROCESSING_TEAM_QUERY = "select id,processing_team value,status from  mje_dbo.config_processing_team";
    public static final String CONFIG_JOURNAL_CATEGORY_QUERY = "select id,journal_entry_category value,status from  mje_dbo.config_journal_entry_category";
    public static final String CONFIG_JOURNAL_METHOD_QUERY = "select id,journal_entry_method value,status from  mje_dbo.config_journal_entry_method";
    public static final String CONFIG_JOURNAL_NATURE_QUERY = "select id,journal_entry_nature value,status from  mje_dbo.config_journal_entry_nature";
    public static final String CONFIG_FREQUENCY_QUERY = "select id,frequency value,status from  mje_dbo.config_frequency";
    public static final String CONFIG_FS_IMPACT_QUERY = "select id,fs_impact value,status from  mje_dbo.config_fs_impact";
    public static final String CONFIG_ENTRY_WORKDAY_QUERY = "select id,expected_entry_work_day value,status  from  mje_dbo.config_expected_entry_work_day";
    public static final String CONFIG_INTERCOMPANY_INDICATOR_QUERY = "select id,intercompany_indicator value,status from  mje_dbo.config_intercompany_indicator";
    public static final String CONFIG_AUTOMATION_TOOL_QUERY = "select id,automation_tool value,status from  mje_dbo.config_automation_tool";
    public static final String CONFIG_ACC_BUSINESS_LINE_QUERY = "select id, accountable_business_line value,status from mje_dbo.config_accountable_business_line ";
    public static final String CONFIG_DATASOURCE_QUERY = "select id,data_sources value,status from mje_dbo.config_data_sources";
    public static final String CONFIG_UPSTREAM_DEPENDENCY_QUERY = "SELECT id, upstream_dependency value , status FROM mje_dbo.config_upstream_dependency";
    public static final String CONFIG_DOWNSTREAM_IMPACT_QUERY = "SELECT id, downstream_impact value , status FROM mje_dbo.config_downstream_impact";
    public static final String INSERT_JOURNAL_QUERY = "INSERT INTO mje_dbo.journal_entry\n" + "(identifier,status, title, category_id, nature_id, method_id, country_id, processing_team_id, description, frequency_id, approver_user_id, preparer_user_id, reviewer_user_id, accountable_business_line_id, accountable_business_line_user_id, ebs_middle_office_user_id, data_sources_description, upstream_dependency_description, downstream_impact_description, fs_impact_id, expected_entry_workday_id, entry_workday_time, intercompany_indicator_id, cogs_impacting," + " sox_control_number, automation_tool_id, automation_notes, elimination_notes, reason_for_inactive, inactivated_date, target_ledger_system_id)\n" + "VALUES(:identifier,:status, :title, :categoryId, :natureId, :methodId, :countryId, :processingTeamId, :description,:frequencyId,:approverUserId, :preparerUserId, :reviewerUserId, :accountableBusinessLineId, :accountableBusinessLineUserId, :ebsMiddleOfficeUserId,:dataSourcesDescription,:upstreamDependencyDescription, :downstreamImpactDescription, :fsImpactId, :expectedEntryWorkdayId,:entryWorkdayTime ,:intercompanyIndicatorId ,:cogsImpacting, :soxControlNumber, :automationToolId, :automationNotes, :eliminationNotes, :reasonForInactive, :inactivatedDate, :targetLedgerSystemId)";
    public static final String GET_APPROVER_BY_REQUEST_NO = "SELECT ApproverUser1 from mje_dbo.Record_Status where requestNo = :requestNo";
    public static final String SET_STATUS_IN_PROGRESS = "UPDATE mje_dbo.Record_Status SET STATUS = 'In Progress', ApprovedUser1Status = 'true' where requestNo = :requestNo";
    public static final String INSERT_JOURNAL_QUERY_TEMP = "INSERT INTO mje_dbo.temp_journal_entry (identifier,status, title, category_id, nature_id, method_id, country_id, processing_team_id, description, frequency_id, approver_user_id, preparer_user_id, reviewer_user_id, accountable_business_line_id, accountable_business_line_user_id, ebs_middle_office_user_id, data_sources_description, upstream_dependency_description, downstream_impact_description, fs_impact_id, expected_entry_workday_id, entry_workday_time, intercompany_indicator_id, cogs_impacting, sox_control_number, automation_tool_id, automation_notes, elimination_notes, reason_for_inactive, inactivated_date, target_ledger_system_id,requestNo, modification, segment, dataSources, upstreamDependency, downstreamImpact, expectedPeriod, glAccount, companyCode, centerDepartment, functionalArea) VALUES (:identifier,:status, :title, :categoryId, :natureId, :methodId, :countryId, :processingTeamId, :description,:frequencyId,:approverUserId, :preparerUserId, :reviewerUserId, :accountableBusinessLineId, :accountableBusinessLineUserId, :ebsMiddleOfficeUserId,:dataSourcesDescription,:upstreamDependencyDescription, :downstreamImpactDescription, :fsImpactId, :expectedEntryWorkdayId,:entryWorkdayTime ,:intercompanyIndicatorId ,:cogsImpacting, :soxControlNumber, :automationToolId, :automationNotes, :eliminationNotes, :reasonForInactive, :inactivatedDate, :targetLedgerSystemId, :requestNo, :modification, :segment, :dataSources, :upstreamDependency, :downstreamImpact, :expectedPeriod, :glAccount, :companyCode, :centerDepartment, :functionalArea)";
    public static final String INSERT_JOURNAL_QUERY_TEMP_MODIFICATION = "INSERT INTO mje_dbo.temp_journal_entry_modification (identifier,status, title, category_id, nature_id, method_id, country_id, processing_team_id, description, frequency_id, approver_user_id, preparer_user_id, reviewer_user_id, accountable_business_line_id, accountable_business_line_user_id, ebs_middle_office_user_id, data_sources_description, upstream_dependency_description, downstream_impact_description, fs_impact_id, expected_entry_workday_id, entry_workday_time, intercompany_indicator_id, cogs_impacting, sox_control_number, automation_tool_id, automation_notes, elimination_notes, reason_for_inactive, inactivated_date, target_ledger_system_id,requestNo, modification, segment, dataSources, upstreamDependency, downstreamImpact, expectedPeriod, glAccount, companyCode, centerDepartment, functionalArea) VALUES(:identifier,:status, :title, :categoryId, :natureId, :methodId, :countryId, :processingTeamId, :description,:frequencyId,:approverUserId, :preparerUserId, :reviewerUserId, :accountableBusinessLineId, :accountableBusinessLineUserId, :ebsMiddleOfficeUserId,:dataSourcesDescription,:upstreamDependencyDescription, :downstreamImpactDescription, :fsImpactId, :expectedEntryWorkdayId,:entryWorkdayTime ,:intercompanyIndicatorId ,:cogsImpacting, :soxControlNumber, :automationToolId, :automationNotes, :eliminationNotes, :reasonForInactive, :inactivatedDate, :targetLedgerSystemId, :requestNo, :modification, :segment, :dataSources, :upstreamDependency, :downstreamImpact, :expectedPeriod, :glAccount, :companyCode, :centerDepartment, :functionalArea)";
    public static final String UPDATE_JOURNAL_QUERY_TEMP = "UPDATE mje_dbo.temp_journal_entry\n" + "set status=:status, title=:title, category_id=:categoryId, nature_id=:natureId, method_id=:methodId, country_id=:countryId, processing_team_id=:processingTeamId, description=:description, frequency_id=:frequencyId, approver_user_id=:approverUserId, preparer_user_id=:preparerUserId, reviewer_user_id=:reviewerUserId" + ", accountable_business_line_id=:accountableBusinessLineId, accountable_business_line_user_id=:accountableBusinessLineUserId, ebs_middle_office_user_id=:ebsMiddleOfficeUserId, data_sources_description=:dataSourcesDescription, upstream_dependency_description=:upstreamDependencyDescription, downstream_impact_description=:downstreamImpactDescription, fs_impact_id=:fsImpactId, expected_entry_workday_id=:expectedEntryWorkdayId, entry_workday_time=:entryWorkdayTime, intercompany_indicator_id=:intercompanyIndicatorId, cogs_impacting=:cogsImpacting," + " sox_control_number=:soxControlNumber, automation_tool_id=:automationToolId, automation_notes=:automationNotes, elimination_notes=:eliminationNotes, reason_for_inactive=:reasonForInactive, inactivated_date=:inactivatedDate, target_ledger_system_id=:targetLedgerSystemId where identifier=:identifier and requestNo=:requestNo";
    public static final String UPDATE_JOURNAL_MODIFICATION = "UPDATE mje_dbo.temp_journal_entry\n" + "set status=:status, title=:title, category_id=:categoryId, nature_id=:natureId, method_id=:methodId, country_id=:countryId, processing_team_id=:processingTeamId, description=:description, frequency_id=:frequencyId, approver_user_id=:approverUserId, preparer_user_id=:preparerUserId, reviewer_user_id=:reviewerUserId" + ", accountable_business_line_id=:accountableBusinessLineId, accountable_business_line_user_id=:accountableBusinessLineUserId, ebs_middle_office_user_id=:ebsMiddleOfficeUserId, data_sources_description=:dataSourcesDescription, upstream_dependency_description=:upstreamDependencyDescription, downstream_impact_description=:downstreamImpactDescription, fs_impact_id=:fsImpactId, expected_entry_workday_id=:expectedEntryWorkdayId, entry_workday_time=:entryWorkdayTime, intercompany_indicator_id=:intercompanyIndicatorId, cogs_impacting=:cogsImpacting," + " sox_control_number=:soxControlNumber, automation_tool_id=:automationToolId, automation_notes=:automationNotes, elimination_notes=:eliminationNotes, reason_for_inactive=:reasonForInactive, inactivated_date=:inactivatedDate, target_ledger_system_id=:targetLedgerSystemId, modification = :modification, requestNo=:requestNo where identifier=:identifier";
    public static final String UPDATE_JOURNAL_MODIFICATION_ENTRY = "UPDATE mje_dbo.journal_entry\n" + "set status=:status, title=:title, category_id=:categoryId, nature_id=:natureId, method_id=:methodId, country_id=:countryId, processing_team_id=:processingTeamId, description=:description, frequency_id=:frequencyId, approver_user_id=:approverUserId, preparer_user_id=:preparerUserId, reviewer_user_id=:reviewerUserId" + ", accountable_business_line_id=:accountableBusinessLineId, accountable_business_line_user_id=:accountableBusinessLineUserId, ebs_middle_office_user_id=:ebsMiddleOfficeUserId, data_sources_description=:dataSourcesDescription, upstream_dependency_description=:upstreamDependencyDescription, downstream_impact_description=:downstreamImpactDescription, fs_impact_id=:fsImpactId, expected_entry_workday_id=:expectedEntryWorkdayId, entry_workday_time=:entryWorkdayTime, intercompany_indicator_id=:intercompanyIndicatorId, cogs_impacting=:cogsImpacting," + " sox_control_number=:soxControlNumber, automation_tool_id=:automationToolId, automation_notes=:automationNotes, elimination_notes=:eliminationNotes, reason_for_inactive=:reasonForInactive, inactivated_date=:inactivatedDate, target_ledger_system_id=:targetLedgerSystemId where identifier=:identifier";
    public static final String GET_FREQUENCY = "SELECT frequency from mje_dbo.config_frequency where id=:id";
    public static final String COUNT_JOURNAL_ENTRY = "SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM mje_dbo.journal_entry WHERE mje_dbo.journal_entry.identifier = :identifier";
    public static final String COUNT_TEMP_JOURNAL_ENTRY = "SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END FROM mje_dbo.temp_journal_entry WHERE mje_dbo.temp_journal_entry.identifier = :identifier";
    public static final String UPDATE_EXPECTED_PERIOD_QUERY = "UPDATE mje_dbo.temp_journal_entry SET expectedPeriod = :expectedPeriod WHERE identifier = :identifier";
    public static final String UPDATE_SEGMENT_QUERY = "UPDATE mje_dbo.temp_journal_entry SET segment = :segment WHERE identifier = :identifier";
    public static final String UPDATE_DATASOURCE_QUERY = "UPDATE mje_dbo.temp_journal_entry SET dataSources = :dataSource WHERE identifier = :identifier";
    public static final String UPDATE_UPSTREAM_DEPENDENCY_QUERY = "UPDATE mje_dbo.temp_journal_entry SET upstreamDependency = :upstreamDependency WHERE identifier = :identifier";
    public static final String UPDATE_DOWNSTREAM_IMPACT_QUERY = "UPDATE mje_dbo.temp_journal_entry SET downstreamImpact = :downstreamImpact WHERE identifier = :identifier";
    public static final String UPDATE_GL_ACCOUNT_QUERY = "UPDATE mje_dbo.temp_journal_entry SET glAccount = :glAccount WHERE identifier = :identifier";
    public static final String UPDATE_FUNCTIONAL_AREA_QUERY = "UPDATE mje_dbo.temp_journal_entry SET functionalArea = :functionalArea WHERE identifier = :identifier";
    public static final String UPDATE_DEPARTMENT_QUERY = "UPDATE mje_dbo.temp_journal_entry SET centerDepartment = :centerDepartment WHERE identifier = :identifier";
    public static final String UPDATE_COMPANY_CODE_QUERY = "UPDATE mje_dbo.temp_journal_entry SET companyCode = :companyCode WHERE identifier = :identifier";
    public static final String UPDATE_EXPECTED_PERIOD_MODIFICATION_QUERY = "UPDATE mje_dbo.temp_journal_entry_modification SET expectedPeriod = :expectedPeriod WHERE identifier = :identifier";
    public static final String UPDATE_SEGMENT_MODIFICATION_QUERY = "UPDATE mje_dbo.temp_journal_entry_modification SET segment = :segment WHERE identifier = :identifier";
    public static final String UPDATE_DATASOURCE_MODIFICATION_QUERY = "UPDATE mje_dbo.temp_journal_entry_modification SET dataSources = :dataSource WHERE identifier = :identifier";
    public static final String UPDATE_UPSTREAM_DEPENDENCY_MODIFICATION_QUERY = "UPDATE mje_dbo.temp_journal_entry_modification SET upstreamDependency = :upstreamDependency WHERE identifier = :identifier";
    public static final String UPDATE_DOWNSTREAM_IMPACT_MODIFICATION_QUERY = "UPDATE mje_dbo.temp_journal_entry_modification SET downstreamImpact = :downstreamImpact WHERE identifier = :identifier";
    public static final String UPDATE_GL_ACCOUNT_MODIFICATION_QUERY = "UPDATE mje_dbo.temp_journal_entry_modification SET glAccount = :glAccount WHERE identifier = :identifier";
    public static final String UPDATE_FUNCTIONAL_AREA_MODIFICATION_QUERY = "UPDATE mje_dbo.temp_journal_entry_modification SET functionalArea = :functionalArea WHERE identifier = :identifier";
    public static final String UPDATE_DEPARTMENT_MODIFICATION_QUERY = "UPDATE mje_dbo.temp_journal_entry_modification SET centerDepartment = :centerDepartment WHERE identifier = :identifier";
    public static final String UPDATE_COMPANY_CODE_MODIFICATION_QUERY = "UPDATE mje_dbo.temp_journal_entry_modification SET companyCode = :companyCode WHERE identifier = :identifier";
    public static final String INSERT_DATA_SOURCE_QUERY = "MERGE INTO mje_dbo.journal_data_sources AS target USING (VALUES (:journalId, :value)) AS source (id, data_sources_id) ON target.id = source.id AND target.data_sources_id = source.data_sources_id WHEN MATCHED THEN UPDATE SET target.data_sources_id = source.data_sources_id WHEN NOT MATCHED THEN INSERT (id, data_sources_id) VALUES (source.id, source.data_sources_id);";
    public static final String INSERT_SEGMENT_QUERY = "MERGE INTO mje_dbo.journal_segment AS target USING (VALUES (:journalId,:value)) AS source (id, segment_id) ON target.id = source.id AND target.segment_id = source.segment_id WHEN MATCHED THEN UPDATE SET target.segment_id = source.segment_id WHEN NOT MATCHED THEN INSERT (id, segment_id) VALUES (source.id, source.segment_id);";
    public static final String INSERT_DOWNSTREAM_IMPACT_QUERY = "MERGE INTO mje_dbo.journal_downstream_impact AS target USING (VALUES (:journalId,:value)) AS source (id, downstream_impact_id) ON target.id = source.id AND target.downstream_impact_id = source.downstream_impact_id WHEN MATCHED THEN UPDATE SET target.downstream_impact_id = source.downstream_impact_id WHEN NOT MATCHED THEN INSERT (id, downstream_impact_id) VALUES (source.id, source.downstream_impact_id);";
    public static final String INSERT_UPSTREAM_DEPENDENCY_QUERY = "MERGE INTO mje_dbo.journal_upstream_dependency AS target USING (VALUES (:journalId,:value)) AS source (id, upstream_dependency_id) ON target.id = source.id AND target.upstream_dependency_id = source.upstream_dependency_id WHEN MATCHED THEN UPDATE SET target.upstream_dependency_id = source.upstream_dependency_id WHEN NOT MATCHED THEN INSERT (id, upstream_dependency_id) VALUES (source.id, source.upstream_dependency_id);";
    public static final String INSERT_EXPECTED_PERIOD_QUERY = "MERGE INTO mje_dbo.journal_expected_period AS target USING (VALUES (:journalId,:value)) AS source (id, expected_period) ON target.id = source.id AND target.expected_period = source.expected_period WHEN MATCHED THEN UPDATE SET target.expected_period = source.expected_period WHEN NOT MATCHED THEN INSERT (id, expected_period) VALUES (source.id, source.expected_period);";
    public static final String INSERT_COMPANY_CODE_QUERY = "MERGE INTO mje_dbo.journal_company_code AS target USING (VALUES (:journalId,:value)) AS source (id, company_code) ON target.id = source.id AND target.company_code = source.company_code WHEN MATCHED THEN UPDATE SET target.company_code = source.company_code WHEN NOT MATCHED THEN INSERT (id, company_code) VALUES (source.id, source.company_code);";
    public static final String INSERT_GL_ACCOUNT_QUERY = "MERGE INTO mje_dbo.journal_gl_account AS target USING (VALUES (:journalId,:value)) AS source (id, gl_account) ON target.id = source.id AND target.gl_account = source.gl_account WHEN MATCHED THEN UPDATE SET target.gl_account = source.gl_account WHEN NOT MATCHED THEN INSERT (id, gl_account) VALUES (source.id, source.gl_account);";
    public static final String INSERT_CENTER_DEPARTMENT_QUERY = "MERGE INTO mje_dbo.journal_center_department AS target USING (VALUES (:journalId,:value)) AS source (id, center_department) ON target.id = source.id AND target.center_department = source.center_department WHEN MATCHED THEN UPDATE SET target.center_department = source.center_department WHEN NOT MATCHED THEN INSERT (id, center_department) VALUES (source.id, source.center_department);";
    public static final String INSERT_FUNCTIONAL_AREA_QUERY = "MERGE INTO mje_dbo.journal_functional_area AS target USING (VALUES (:journalId,:value)) AS source (id, functional_area) ON target.id = source.id AND target.functional_area = source.functional_area WHEN MATCHED THEN UPDATE SET target.functional_area = source.functional_area WHEN NOT MATCHED THEN INSERT (id, functional_area) VALUES (source.id, source.functional_area);";
    public static final String DELETE_SEGMENT_QUERY = "delete from  mje_dbo.journal_segment where id=:journalId";
    public static final String DELETE_COMPANY_CODE_QUERY = "delete from  mje_dbo.journal_company_code where id=:journalId";
    public static final String DELETE_DOWNSTREAM_IMPACT_QUERY = "delete from  mje_dbo.journal_downstream_impact where id=:journalId";
    public static final String DELETE_UPSTREAM_DEPENDENCY_QUERY = "delete from  mje_dbo.journal_upstream_dependency where id=:journalId";
    public static final String DELETE_EXPECTED_PERIOD_QUERY = "delete from  mje_dbo.journal_expected_period where id=:journalId";
    public static final String DELETE_GL_ACCOUNT_QUERY = "delete from  mje_dbo.journal_gl_account where id=:journalId";
    public static final String DELETE_FUNCTIONAL_AREA_QUERY = "delete from  mje_dbo.journal_functional_area where id=:journalId";
    public static final String DELETE_CENTER_DEPARTMENT_QUERY = "delete from  mje_dbo.journal_center_department where id=:journalId";
    public static final String DELETE_DATA_SOURCE_QUERY = "delete from  mje_dbo.journal_data_sources  where id=:journalId";
    public static final String DELETE_JOURNAL_QUERY = "delete from  mje_dbo.journal_entry where identifier=:journalId";
    public static final String DELETE_RECORD = "delete from  mje_dbo.Record_Status  where requestNo=:requestNo";
    public static final String DELETE_TEMP_JOURNAL = "delete from  mje_dbo.temp_journal_entry where requestNo=:requestNo";
    public static final String DELETE_TEMP_JOURNAL_IDENTIFIER = "delete from  mje_dbo.temp_journal_entry where requestNo=:requestNo and identifier =  :identifier";
    public static final String MODIFY_RECORD = "Update mje_dbo.Record_Status set post_date = :postDate, requestorName = :requestorName,reason = :reason , country = :country,userId = :userId, status = :status , requestType = :requestType , approverGroup1 = :approverGroup1, approverUser1 = :approverUser1, approverGroup2 = :approverGroup2, approverUser2 = :approverUser2, mjeFile = :mjeFile, ajeFile = :ajeFile where requestNo=:requestNo";
    public static final String JOURNAL_ENTRY = "select DISTINCT mje_dbo.journal_entry.identifier,mje_dbo.config_expected_entry_work_day.expected_entry_work_day as entryWorkday, mje_dbo.journal_entry.status, mje_dbo.journal_entry.title, mje_dbo.journal_entry.approver_user_id ,mje_dbo.config_accountable_business_line.accountable_business_line," +
            "mje_dbo.journal_entry.reviewer_user_id, mje_dbo.journal_entry.preparer_user_id,mje_dbo.journal_entry.accountable_business_line_user_id,mje_dbo.journal_entry.ebs_middle_office_user_id,\n" +
            "mje_dbo.config_journal_entry_category.journal_entry_category, mje_dbo.config_journal_entry_nature.journal_entry_nature, mje_dbo.config_journal_entry_method.journal_entry_method, \n" +
            "mje_dbo.config_country.country, mje_dbo.config_processing_team.processing_team, description, mje_dbo.config_frequency.frequency, data_sources_description, upstream_dependency_description, \n" +
            "downstream_impact_description, mje_dbo.config_fs_impact.fs_impact, entry_workday_time,mje_dbo.config_intercompany_indicator.intercompany_indicator," +
            "cogs_impacting,sox_control_number,mje_dbo.config_automation_tool.automation_tool,automation_notes,elimination_notes,reason_for_inactive,inactivated_date,mje_dbo.config_target_ledger_system.target_ledger_system\n" +
            "from mje_dbo.journal_entry " +
            "inner join mje_dbo.config_journal_entry_category on mje_dbo.journal_entry.category_id = mje_dbo.config_journal_entry_category.id " +
            "inner join mje_dbo.config_journal_entry_nature on mje_dbo.journal_entry.nature_id = mje_dbo.config_journal_entry_nature.id \n" +
            "inner join mje_dbo.config_journal_entry_method on mje_dbo.journal_entry.method_id = mje_dbo.config_journal_entry_method.id\n" +
            "inner join mje_dbo.config_country on mje_dbo.journal_entry.country_id = mje_dbo.config_country.id\n" +
            "inner join mje_dbo.config_processing_team on mje_dbo.journal_entry.processing_team_id = mje_dbo.config_processing_team.id\n" +
            "inner join mje_dbo.config_frequency on mje_dbo.journal_entry.frequency_id = mje_dbo.config_frequency.id\n" +
            "inner join mje_dbo.config_fs_impact on mje_dbo.journal_entry.fs_impact_id = mje_dbo.config_fs_impact.id\n" +
            "inner join mje_dbo.config_intercompany_indicator on mje_dbo.journal_entry.intercompany_indicator_id = mje_dbo.config_intercompany_indicator.id\n" +
            "inner join mje_dbo.config_automation_tool on mje_dbo.journal_entry.automation_tool_id = mje_dbo.config_automation_tool.id\n" +
            "inner join mje_dbo.config_target_ledger_system on mje_dbo.journal_entry.target_ledger_system_id = mje_dbo.config_target_ledger_system.id\n" +
            "inner join mje_dbo.config_expected_entry_work_day on mje_dbo.journal_entry.expected_entry_workday_id = mje_dbo.config_expected_entry_work_day.id\n" +
            "inner join mje_dbo.config_accountable_business_line  on mje_dbo.journal_entry.accountable_business_line_id = mje_dbo.config_accountable_business_line.id\n";
    public static final String JOURNAL_ENTRY_PAGED = JOURNAL_ENTRY + "order by mje_dbo.journal_entry.status ASC, mje_dbo.journal_entry.identifier ASC offset :offset rows fetch next :pageSize row only";
    public static final String TEMP_JOURNAL_ENTRY_MODIFICATION = "WITH ranked_requests AS (SELECT *, ROW_NUMBER() OVER(PARTITION BY identifier ORDER BY CreationTime DESC) AS rn FROM mje_dbo.temp_journal_entry_modification WHERE RequestNo = :requestNo) SELECT * FROM ranked_requests WHERE rn <= 2";
    public static final String PAGED = "offset :offset rows fetch next :pageSize row only";
    public static final String JOURNAL_ENTRY_FILTERS = JOURNAL_ENTRY +
            "INNER JOIN mje_dbo.journal_segment on mje_dbo.journal_segment.id = mje_dbo.journal_entry.identifier \n" +
            "INNER JOIN mje_dbo.journal_data_sources on mje_dbo.journal_data_sources.id = mje_dbo.journal_entry.identifier \n" +
            "full Outer JOIN mje_dbo.journal_center_department on mje_dbo.journal_center_department.id = mje_dbo.journal_entry.identifier \n" +
            "full Outer JOIN mje_dbo.journal_company_code on mje_dbo.journal_company_code.id = mje_dbo.journal_entry.identifier \n" +
            "INNER JOIN mje_dbo.journal_downstream_impact on mje_dbo.journal_downstream_impact.id = mje_dbo.journal_entry.identifier \n" +
            "INNER JOIN mje_dbo.journal_expected_period on mje_dbo.journal_expected_period.id = mje_dbo.journal_entry.identifier \n" +
            "full Outer JOIN mje_dbo.journal_functional_area on mje_dbo.journal_functional_area.id = mje_dbo.journal_entry.identifier \n" +
            "full Outer JOIN mje_dbo.journal_gl_account on mje_dbo.journal_gl_account.id = mje_dbo.journal_entry.identifier \n" +
            "INNER JOIN mje_dbo.journal_upstream_dependency on mje_dbo.journal_upstream_dependency.id = mje_dbo.journal_entry.identifier \n" +
            "where (mje_dbo.journal_entry.frequency_id = COALESCE(:frequencyList, frequency_id) or mje_dbo.journal_entry.frequency_id IN (:frequencyList)) \n" +
            "and (mje_dbo.journal_entry.category_id = COALESCE(:categoryList, category_id) or mje_dbo.journal_entry.category_id IN (:categoryList)) \n" +
            "and (mje_dbo.journal_entry.nature_id = COALESCE(:natureList, nature_id) or mje_dbo.journal_entry.nature_id IN (:natureList)) \n" +
            "and (mje_dbo.journal_entry.method_id = COALESCE(:methodList, method_id) or mje_dbo.journal_entry.method_id IN (:methodList)) \n" +
            "and (mje_dbo.journal_entry.country_id = COALESCE(:countryList, country_id) or mje_dbo.journal_entry.country_id IN (:countryList)) \n" +
            "and (mje_dbo.journal_entry.processing_team_id = COALESCE(:processingTeamList, processing_team_id) or mje_dbo.journal_entry.processing_team_id IN (:processingTeamList)) \n" +
            "and (mje_dbo.journal_entry.fs_impact_id = COALESCE(:fsImpactList, fs_impact_id) or mje_dbo.journal_entry.fs_impact_id IN (:fsImpactList)) \n" +
            "and (mje_dbo.journal_entry.intercompany_indicator_id = COALESCE(:intercompanyIndicatorList, intercompany_indicator_id) or mje_dbo.journal_entry.intercompany_indicator_id IN (:intercompanyIndicatorList)) \n" +
            "and (mje_dbo.journal_entry.automation_tool_id = COALESCE(:automationToolList, automation_tool_id) or mje_dbo.journal_entry.automation_tool_id IN (:automationToolList)) \n" +
            "and (mje_dbo.journal_entry.target_ledger_system_id = COALESCE(:targetLedgerSystemList, target_ledger_system_id) or mje_dbo.journal_entry.target_ledger_system_id IN (:targetLedgerSystemList)) \n" +
            "and (mje_dbo.journal_entry.accountable_business_line_id = COALESCE(:accountableBusinessLineList, accountable_business_line_id) or mje_dbo.journal_entry.accountable_business_line_id IN (:accountableBusinessLineList)) \n" +
            "and (mje_dbo.journal_entry.expected_entry_workday_id = COALESCE(:expectedEntryWorkdayList, expected_entry_workday_id) or mje_dbo.journal_entry.expected_entry_workday_id IN (:expectedEntryWorkdayList)) \n" +
            "and (mje_dbo.journal_data_sources.data_sources_id = COALESCE(:dataSourceList, data_sources_id) or mje_dbo.journal_data_sources.data_sources_id IN (:dataSourceList)) \n" +
            "and (mje_dbo.journal_segment.segment_id = COALESCE(:segmentList, segment_id) or mje_dbo.journal_segment.segment_id IN (:segmentList)) \n" +
            "and (mje_dbo.journal_downstream_impact.downstream_impact_id = COALESCE(:downStreamImpactList, downstream_impact_id) or mje_dbo.journal_downstream_impact.downstream_impact_id IN (:downStreamImpactList)) \n" +
            "and (mje_dbo.journal_upstream_dependency.upstream_dependency_id = COALESCE(:upStreamDependencyList, upstream_dependency_id) or mje_dbo.journal_upstream_dependency.upstream_dependency_id IN (:upStreamDependencyList) ) \n" +
            "and (mje_dbo.journal_center_department.center_department = COALESCE(:departmentList, center_department) or mje_dbo.journal_center_department.center_department IN (:departmentList) or mje_dbo.journal_center_department.center_department IS NULL) \n" +
            "and (mje_dbo.journal_company_code.company_code = COALESCE(:companyCodeList, company_code) or mje_dbo.journal_company_code.company_code IN (:companyCodeList) or mje_dbo.journal_company_code.company_code IS NULL) \n" +
            "and (mje_dbo.journal_expected_period.expected_period = COALESCE(:expectedPeriodList, expected_period) or mje_dbo.journal_expected_period.expected_period IN (:expectedPeriodList)) \n" +
            "and (mje_dbo.journal_functional_area.functional_area = COALESCE(:functionalAreaList, functional_area) or mje_dbo.journal_functional_area.functional_area IN (:functionalAreaList) or mje_dbo.journal_functional_area.functional_area IS NULL) \n" +
            "and (mje_dbo.journal_gl_account.gl_account = COALESCE(:glAccountList, gl_account) or mje_dbo.journal_gl_account.gl_account IN (:glAccountList) or mje_dbo.journal_gl_account.gl_account IS NULL) \n" +
            "order by mje_dbo.journal_entry.status ASC, mje_dbo.journal_entry.identifier ASC ";
    public static final String JOURNAL_ENTRY_FILTERS_PAGED = JOURNAL_ENTRY_FILTERS + PAGED;
    public static final String JOURNAL_ENTRY_SINGLE = JOURNAL_ENTRY + "where mje_dbo.journal_entry.identifier = :journalId";
    public static final String UPDATE_JOURNAL_QUERY = "UPDATE mje_dbo.journal_entry\n" + "set status=:status, title=:title, category_id=:categoryId, nature_id=:natureId, method_id=:methodId, country_id=:countryId, processing_team_id=:processingTeamId, description=:description, frequency_id=:frequencyId, approver_user_id=:approverUserId, preparer_user_id=:preparerUserId, reviewer_user_id=:reviewerUserId" + ", accountable_business_line_id=:accountableBusinessLineId, accountable_business_line_user_id=:accountableBusinessLineUserId, ebs_middle_office_user_id=:ebsMiddleOfficeUserId, data_sources_description=:dataSourcesDescription, upstream_dependency_description=:upstreamDependencyDescription, downstream_impact_description=:downstreamImpactDescription, fs_impact_id=:fsImpactId, expected_entry_workday_id=:expectedEntryWorkdayId, entry_workday_time=:entryWorkdayTime, intercompany_indicator_id=:intercompanyIndicatorId, cogs_impacting=:cogsImpacting," + " sox_control_number=:soxControlNumber, automation_tool_id=:automationToolId, automation_notes=:automationNotes, elimination_notes=:eliminationNotes, reason_for_inactive=:reasonForInactive, inactivated_date=:inactivatedDate, target_ledger_system_id=:targetLedgerSystemId where identifier=:identifier";
    public static final String SEGMENT = "select DISTINCT mje_dbo.journal_entry.identifier as id,(select mje_dbo.config_segment.segment from mje_dbo.config_segment where mje_dbo.config_segment.id = mje_dbo.journal_segment.segment_id) as segment from mje_dbo.journal_entry inner join mje_dbo.journal_segment on mje_dbo.journal_entry.identifier = mje_dbo.journal_segment.id";
    public static final String DATA_SOURCE = "select DISTINCT mje_dbo.journal_entry.identifier as id,(select mje_dbo.config_data_sources.data_sources from mje_dbo.config_data_sources where mje_dbo.config_data_sources.id = mje_dbo.journal_data_sources.data_sources_id) as data_sources from mje_dbo.journal_entry inner join mje_dbo.journal_data_sources on mje_dbo.journal_entry.identifier = mje_dbo.journal_data_sources.id";
    public static final String DOWNSTREAM_IMPACT = "select DISTINCT mje_dbo.journal_entry.identifier as id,(select mje_dbo.config_downstream_impact.downstream_impact from mje_dbo.config_downstream_impact where mje_dbo.config_downstream_impact.id = mje_dbo.journal_downstream_impact.downstream_impact_id) as downstream_impact from mje_dbo.journal_entry inner join mje_dbo.journal_downstream_impact on mje_dbo.journal_entry.identifier = mje_dbo.journal_downstream_impact.id";
    public static final String UPSTREAM_DEPENDENCY = "select DISTINCT mje_dbo.journal_entry.identifier as id,(select mje_dbo.config_upstream_dependency.upstream_dependency from mje_dbo.config_upstream_dependency where mje_dbo.config_upstream_dependency.id = mje_dbo.journal_upstream_dependency.upstream_dependency_id) as upstream_dependency from mje_dbo.journal_entry inner join mje_dbo.journal_upstream_dependency on mje_dbo.journal_entry.identifier = mje_dbo.journal_upstream_dependency.id";
    public static final String CENTER_DEPARTMENT = "select id, center_department from mje_dbo.journal_center_department";
    public static final String COMPANY_CODE = "select id, company_code from mje_dbo.journal_company_code";
    public static final String EXPECTED_PERIOD = "select id, expected_period from mje_dbo.journal_expected_period";
    public static final String FUNCTIONAL_AREA = "select id, functional_area from mje_dbo.journal_functional_area";
    public static final String GL_ACCOUNT = "select id, gl_account from mje_dbo.journal_gl_account";
    public static final String JOURNAL_ENTRY_COUNT = "select count(*) from  mje_dbo.journal_entry";
    public static final String TEMP_JOURNAL_ENTRY_COUNT = "select count(*) from  mje_dbo.temp_journal_entry";
    public static final String INSERT_CONFIG_SEGMENT_QUERY = "Insert into  mje_dbo.config_segment values (:value,:status)";
    public static final String INSERT_CONFIG_DATA_SOURCES_QUERY = "Insert into  mje_dbo.config_data_sources values (:value,:status)";
    public static final String INSERT_CONFIG_DOWNSTREAM_IMPACT_QUERY = "Insert into  mje_dbo.config_downstream_impact values (:value,:status)";
    public static final String INSERT_CONFIG_UPSTREAM_DEPENDENCY_QUERY = "Insert into  mje_dbo.config_upstream_dependency values (:value,:status)";
    public static final String INSERT_CONFIG_EXPECTED_ENTRY_WORK_DAY_QUERY = "Insert into  mje_dbo.config_expected_entry_work_day values (:value,:status)";
    public static final String INSERT_CONFIG_ACCOUNTABLE_BUSINESS_LINE_QUERY = "Insert into  mje_dbo.config_accountable_business_line values (:value,:status)";
    public static final String INSERT_CONFIG_AUTOMATION_TOOL_QUERY = "Insert into  mje_dbo.config_automation_tool values (:value,:status)";
    public static final String INSERT_CONFIG_COUNTRY_QUERY = "Insert into  mje_dbo.config_country values (:value,:status)";
    public static final String INSERT_RECORD_STATUS_QUERY = "Insert into  mje_dbo.Record_Status values (:postDate, :description, :requestType, :status, :country, :approverGroup1, :requestorName, :approverGroup2, :approverUser1, :approverUser2, :userId ,:reason,:mjeFile ,:ajeFile, :rejectedReason, :approvedUser1Status, :approvedUser2Status, :adminUser , :adminDate )";
    public static final String INSERT_CONFIG_COMMENT = "Insert into  mje_dbo.config_comment values (:requestNo, :comment, :commentDate, :userId)";
    public static final String UPDATE_RECORD_AFTER_REJECT = "UPDATE mje_dbo.Record_Status SET POST_DATE=(:postDate), Status= (:status), RejectedReason=(:rejectedReason) , ApprovedUser1Status = (CASE WHEN  ApproverUser1 = (:reviewerUser) then (:flag) else NULL END), ApprovedUser2Status = (CASE WHEN  ApproverUser2 = (:reviewerUser) then (:flag) else NULL END) WHERE RequestNo= (:requestNo)";
    public static final String UPDATE_RECORD_ADMIN_REVIEW = "Update mje_dbo.Record_Status set approverGroup1 = :approverGroup1, approverUser1 = :approverUser1, approverGroup2 = :approverGroup2, approverUser2 = :approverUser2 , adminUser= :adminUser , adminDate = :adminDate where requestNo=:requestNo";
    public static final String UPDATE_RECORD_AFTER_APPROVAL = "UPDATE mje_dbo.Record_Status SET POST_DATE=(:postDate), Status= (:status), RejectedReason=(:rejectedReason) , ApprovedUser1Status = (CASE WHEN  ApproverUser1 = (:reviewerUser) then (:flag) else ApprovedUser1Status END), ApprovedUser2Status = (CASE WHEN  ApproverUser2 = (:reviewerUser) then (:flag) else ApprovedUser2Status END) WHERE RequestNo= (:requestNo)";
    public static final String UPDATE_RECORD_AFTER_FINAL_APPROVAL = "UPDATE mje_dbo.Record_Status SET POST_DATE=(:postDate), Status= (:status), RejectedReason=(:rejectedReason) WHERE RequestNo= (:requestNo) and ApprovedUser1Status = 'true' and ApprovedUser2Status = 'true'";
    public static final String GET_STATUS_BY_REQUEST_NO = "Select status from mje_dbo.Record_Status where requestNo= :requestNo";
    public static final String INSERT_CONFIG_FREQUENCY_QUERY = "Insert into  mje_dbo.config_frequency values (:value,:status)";
    public static final String INSERT_CONFIG_FS_IMPACT_QUERY = "Insert into  mje_dbo.config_fs_impact values (:value,:status)";
    public static final String INSERT_CONFIG_INTERCOMPANY_INDICATOR_QUERY = "Insert into  mje_dbo.config_intercompany_indicator values (:value,:status)";
    public static final String INSERT_CONFIG_JOURNAL_ENTRY_CATEGORY_QUERY = "Insert into  mje_dbo.config_journal_entry_category values (:value,:status)";
    public static final String INSERT_CONFIG_JOURNAL_ENTRY_METHOD_QUERY = "Insert into  mje_dbo.config_journal_entry_method values (:value,:status)";
    public static final String INSERT_CONFIG_JOURNAL_ENTRY_NATURE_QUERY = "Insert into  mje_dbo.config_journal_entry_nature values (:value,:status)";
    public static final String INSERT_CONFIG_PROCESSING_TEAM_QUERY = "Insert into  mje_dbo.config_processing_team values (:value,:status)";
    public static final String INSERT_CONFIG_TARGET_LEDGER_SYSTEM_QUERY = "Insert into  mje_dbo.config_target_ledger_system values (:value,:status)";
    public static final String DELETE_CONFIG_SEGMENT_QUERY = "Delete from mje_dbo.config_segment where id = ?";
    public static final String DELETE_CONFIG_DATA_SOURCES_QUERY = "Delete from mje_dbo.config_data_sources where id = ?";
    public static final String DELETE_CONFIG_DOWNSTREAM_IMPACT_QUERY = "Delete from mje_dbo.config_downstream_impact where id = ?";
    public static final String DELETE_CONFIG_UPSTREAM_DEPENDENCY_QUERY = "Delete from mje_dbo.config_upstream_dependency where id = ?";
    public static final String DELETE_CONFIG_EXPECTED_ENTRY_WORK_DAY_QUERY = "Delete from mje_dbo.config_expected_entry_work_day where id = ?";
    public static final String DELETE_CONFIG_ACCOUNTABLE_BUSINESS_LINE_QUERY = "Delete from mje_dbo.config_accountable_business_line where id = ?";
    public static final String DELETE_CONFIG_AUTOMATION_TOOL_QUERY = "Delete from mje_dbo.config_automation_tool where id = ?";
    public static final String DELETE_CONFIG_COUNTRY_QUERY = "Delete from mje_dbo.config_country where id = ?";
    public static final String DELETE_CONFIG_FREQUENCY_QUERY = "Delete from mje_dbo.config_frequency where id = ?";
    public static final String DELETE_CONFIG_FS_IMPACT_QUERY = "Delete from mje_dbo.config_fs_impact where id = ?";
    public static final String DELETE_CONFIG_INTERCOMPANY_INDICATOR_QUERY = "Delete from mje_dbo.config_intercompany_indicator where id = ?";
    public static final String DELETE_CONFIG_JOURNAL_ENTRY_CATEGORY_QUERY = "Delete from mje_dbo.config_journal_entry_category where id = ?";
    public static final String DELETE_CONFIG_JOURNAL_ENTRY_METHOD_QUERY = "Delete from mje_dbo.config_journal_entry_method where id = ?";
    public static final String DELETE_CONFIG_JOURNAL_ENTRY_NATURE_QUERY = "Delete from mje_dbo.config_journal_entry_nature where id = ?";
    public static final String DELETE_CONFIG_PROCESSING_TEAM_QUERY = "Delete from mje_dbo.config_processing_team where id = ?";
    public static final String DELETE_CONFIG_TARGET_LEDGER_SYSTEM_QUERY = "Delete from mje_dbo.config_target_ledger_system where id = ?";
    public static final String GET_LATEST_REQUEST_NO = "select top 1 RequestNo  FROM mje_dbo.Record_Status ORDER BY RequestNo DESC";
    public static final String GET_REQUEST_BY_REQUEST_NO = "SELECT * FROM mje_dbo.Record_Status WHERE mje_dbo.Record_Status.requestNo = ?";
    public static final String GET_BY_REQUEST_STATUS = "select *  FROM mje_dbo.Record_Status where mje_dbo.Record_Status.status = :status and mje_dbo.Record_Status.userId = :userId ORDER BY RequestNo DESC";
    public static final String GET_BY_REQUEST_STATUS_ADMIN = "select *  FROM mje_dbo.Record_Status where mje_dbo.Record_Status.status = :status ORDER BY RequestNo DESC";
    public static final String GET_BY_REQUEST_NO_MJE = "select *  FROM mje_dbo.temp_journal_entry where mje_dbo.temp_journal_entry.requestNo = :requestNo";
    public static final String GET_BY_REQUEST_NO_COMMENT = "select *  FROM mje_dbo.config_comment where mje_dbo.config_comment.requestNo = :requestNo";
    public static final String GET_BY_REQUEST_NO_JOURNAL_INFO = "select *  FROM mje_dbo.Record_Status where mje_dbo.Record_Status.requestNo = :requestNo";
    public static final String GET_BY_REQUEST_STATUS_APPROVER = "select *  FROM mje_dbo.Record_Status where mje_dbo.Record_Status.status = :status and (mje_dbo.Record_Status.approverUser1 = :approverUser or mje_dbo.Record_Status.approverUser2 = :approverUser) ORDER BY RequestNo DESC";
    public static final String GET_BY_REQUEST_STATUS_APPROVER_APPROVED = "select *  FROM mje_dbo.Record_Status where (mje_dbo.Record_Status.approverUser1 = :approverUser and mje_dbo.Record_Status.ApprovedUser1Status = 'true') or (mje_dbo.Record_Status.approverUser2 = :approverUser and mje_dbo.Record_Status.ApprovedUser2Status = 'true') ORDER BY RequestNo DESC";
    public static final String GET_BY_REQUEST_STATUS_APPROVER_PENDING = "select *  FROM mje_dbo.Record_Status where mje_dbo.Record_Status.status = :status and ( (mje_dbo.Record_Status.approverUser1 = :approverUser and (mje_dbo.Record_Status.ApprovedUser1Status <> 'true' or mje_dbo.Record_Status.ApprovedUser1Status IS NULL)) or (mje_dbo.Record_Status.approverUser2 = :approverUser and (mje_dbo.Record_Status.ApprovedUser2Status <> 'true' or mje_dbo.Record_Status.ApprovedUser2Status is NULL) )) ORDER BY RequestNo DESC";
    public static final String UPDATE_CONFIG_SEGMENT_QUERY = "Update mje_dbo.config_segment set segment = (:value), status = (:status) where id = (:segmentId)";
    public static final String UPDATE_CONFIG_DATA_SOURCES_QUERY = "Update mje_dbo.config_data_sources set data_sources = (:value), status = (:status) where id = (:dataSourceId)";
    public static final String UPDATE_CONFIG_DOWNSTREAM_IMPACT_QUERY = "Update mje_dbo.config_downstream_impact set downstream_impact = (:value), status = (:status) where id = (:downstreamImpactId)";
    public static final String UPDATE_CONFIG_UPSTREAM_DEPENDENCY_QUERY = "Update mje_dbo.config_upstream_dependency set upstream_dependency = (:value), status = (:status) where id = (:upstreamDependencyId)";
    public static final String UPDATE_CONFIG_EXPECTED_ENTRY_WORK_DAY_QUERY = "Update mje_dbo.config_expected_entry_work_day set expected_entry_work_day = (:value), status = (:status) where id = (:expectedEntryWorkDayId)";
    public static final String UPDATE_CONFIG_ACCOUNTABLE_BUSINESS_LINE_QUERY = "Update mje_dbo.config_accountable_business_line set accountable_business_line = (:value), status = (:status) where id = (:accountableBusinessLineId)";
    public static final String UPDATE_CONFIG_AUTOMATION_TOOL_QUERY = "Update mje_dbo.config_automation_tool set automation_tool = (:value), status = (:status) where id = (:automationToolId)";
    public static final String UPDATE_CONFIG_COUNTRY_QUERY = "Update mje_dbo.config_country set country = (:value), status = (:status) where id = (:countryId)";
    public static final String UPDATE_CONFIG_FREQUENCY_QUERY = "Update mje_dbo.config_frequency set frequency = (:value), status = (:status) where id = (:frequencyId)";
    public static final String UPDATE_CONFIG_FS_IMPACT_QUERY = "Update mje_dbo.config_fs_impact set fs_impact = (:value), status = (:status) where id = (:fsImpactId)";
    public static final String UPDATE_CONFIG_INTERCOMPANY_INDICATOR_QUERY = "Update mje_dbo.config_intercompany_indicator set intercompany_indicator = (:value), status = (:status) where id = (:intercompanyIndicatorId)";
    public static final String UPDATE_CONFIG_JOURNAL_ENTRY_CATEGORY_QUERY = "Update mje_dbo.config_journal_entry_category set journal_entry_category = (:value), status = (:status) where id = (:journalEntryCategoryId)";
    public static final String UPDATE_CONFIG_JOURNAL_ENTRY_METHOD_QUERY = "Update mje_dbo.config_journal_entry_method set journal_entry_method = (:value), status = (:status) where id = (:journalEntryMethodId)";
    public static final String UPDATE_CONFIG_JOURNAL_ENTRY_NATURE_QUERY = "Update mje_dbo.config_journal_entry_nature set journal_entry_nature = (:value), status = (:status) where id = (:journalEntryNatureId)";
    public static final String UPDATE_CONFIG_PROCESSING_TEAM_QUERY = "Update mje_dbo.config_processing_team set processing_team = (:value), status = (:status) where id = (:processingTeamId)";
    public static final String UPDATE_CONFIG_TARGET_LEDGER_SYSTEM_QUERY = "Update mje_dbo.config_target_ledger_system set target_ledger_system = (:value), status = (:status) where id = (:targetLedgerSystemId)";
//            "from mje_dbo.config_segment inner join mje_dbo.journal_segment on mje_dbo.config_segment.id = mje_dbo.journal_segment.segment_id;update mje_dbo.config_segment set mje_dbo.config_segment.status = 'I' " +
//            "from mje_dbo.config_segment " +
//            "where mje_dbo.config_segment.id not in (select distinct mje_dbo.config_segment.id from mje_dbo.config_segment inner join mje_dbo.journal_segment on mje_dbo.config_segment.id = mje_dbo.journal_segment.segment_id)"
//    public static final String UPDATE_CONFIG_DATA_SOURCES_VIA_JOURNAL_DATA_SOURCES = "update mje_dbo.config_data_sources;
}